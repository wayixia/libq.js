<!-- demo components -->
<style>
  .layer-options {
  position: absolute;
  left: 0px;
  top: 0px;
  bottom: 0px;
  right: 0px;
  padding: 9px 0;
  overflow:auto;
}


.q-tabs.v-property {
  height: 100%;
}



.q-tabs.v-property .q-tabs-header {
  float: left; 
  width: 129px;
  border-right: 1px solid #EEE;
  height: 100%;
  padding: 0 8px;
}

.q-tabs.v-property .q-tabs-split {
  height:100%;
  width: 1px;
  background-color: #EEE;
}


.q-tabs-body {
  margin-left: 149px;
  border-left: 0px solid #CCCCCC;
  height: 100%;
  background-colors: yellow;
  padding: 0 7px 0 7px;
}

.q-tabs-body .q-panel {
  padding: 0px 0px;
  height: 100%;
}
</style>
<template>
<div class="layer-options">
  <div class="q-tabs v-property">
    <div class="q-tabs-header" qid="q-frame-left">
      <div class="q-table-moveline" qid="q-moveline"></div>
    </div>
    <div class="q-tabs-body" qid="q-frame-right">
      <div qid="panel-2-1" class="q-panel">
        <!--div qid="table-container" style="width:100%; height:100%; ">
        </div-->
    </div>
  </div>
</div>
</template>
<!-- options end -->
<script>

Q.Dialog.extend({
app: null,
doc_listctrl: null,
category_tree: null,
context_menu : null,
__init__ : function(json) {
  var _this = this;
  json = json || {};
  this.app = json.app;
  json.content = '{#template}',
  json.wstyle = "simpleos";
  json.width = 780;
  json.height = 550;
  json.on_create = Q.bind_handler(this, this.on_create);
  json.on_size = Q.bind_handler(this, this.on_size);
  //json.on_close = Q.bind_handler(this, this.on_close);
  Q.Dialog.prototype.__init__.call(this, json);
  //this.removeStyle('q-attr-fixed|q-attr-no-max|q-attr-no-min');
},

on_create : function() {
  var _this = this;
  this.frame_left = this.item( 'q-frame-left' ); 
  this.frame_right = this.item( 'q-frame-right' ); 
  this.init_ui_table();
  this.init_ui_tree();
  this.layout = new Q.TableColumn( this.frame_left, {
    moveline: this.item( 'q-moveline' ), 
    onStart: function(evt, handler) { 
      //_this._column_MouseDown(evt, handler);
    }, 
    onStop: function(evt, handler) { 
      //_this._column_MouseUp(evt, handler);
      if( !this._isResizable )
        return;
      console.log( handler._width );
      _this.frame_left.style.width = handler._width + 'px'; 
      _this.frame_right.style.marginLeft = ( handler._width + 20 ) + 'px';
      _this.doc_listctrl.autosize();
    }
  });
  this.removeStyle('q-attr-fixed q-attr-no-max q-attr-no-min');
  this.app.service.category_list(function(r, data) {
    if(r == 0) {
      function get_childs(cid, items, tid, f) {
        for(var i=0; i < items.length; i++) {
          if(items[i].category_pid == cid) {
            var new_tid = f(tid, items[i]);
            get_childs(items[i].category_id, items, new_tid, f); 
          }
        }
      }
      // save category data
      for(var i=0; i < data.length; i++) {
        _this.app.categories[data[i].category_id] = data[i];
      }

      get_childs(0, data, _this.category_tree.getRoot(), (function(thiz) { 
        return function(tid, obj) {
          var new_tid = thiz.createNode(tid, "[id:"+obj.category_id+"]["+obj.orders+"]" + obj.category_name, false);
          thiz.setItemData(new_tid, obj.category_id);
          return new_tid;
        } 
      })(_this.category_tree));
    }
  });
},

on_size: function(w, h) {
  this.doc_listctrl.autosize(); 
},

init_ui_tree: function() {
  var _this = this;
  // init tree ui
  this.category_tree = new Q.Tree({
    id : this.frame_left,
    name : "站点根目录",
    open : true,
    onContextMenu : function(nItem, evt) {
      var cid = this.getItemData(nItem) || 0;
      if(cid < 1) {
        _this.show_root_menu(cid, evt);
      } else {
        _this.show_normal_menu(cid, evt);
      }
    }
  });

  this.category_tree.itemClick = function(nItem) {
    var cid = this.getItemData(nItem);
    _this.update_ui_table(cid);
  }
},

init_ui_table: function() {
  var _this = this;
  this.doc_listctrl = new Q.Table({
    wnd: this, 
    id: this.item('panel-2-1'),
    wstyle :  'q-attr-no-title q-attr2-border',
    row_height: 22,
    auto_height : true,
    columns : [ 
      { name: 'id', title: 'ID', width: 30, align: 'center', issortable: true, fixedWidth: true}, 
      { name: 'title', title: '标题', width: 300, align: 'left', issortable: true, isHTML : true, fixedWidth: false},
    ],
    store : new Q.Store({data: []}),
    row_ondblclick : function(row) {
      var record = this.getRecord(row);
      if(record && record.id) {
        _this.app.service.document_content(record.id, function(r, data) {
          _this.app.document_editor(r, data);
        });
      }
    },
  });
  setTimeout(function() { _this.doc_listctrl.autosize(); }, 300);
},

update_ui_table : function(cid) {
  var _this = this;
  this.app.service.document_list(cid, function(r, data) {
    _this.doc_listctrl.clear();
    _this.doc_listctrl.append_data(data);
    _this.doc_listctrl.render();
    //g_tbl.sortTable(0, true, compare0);
  });
},

show_root_menu : function(cid, evt) {
  var d = this;
  // init menu
  var menu_file = new Q.Menu({});
  var menu_create = d.create_contenttype_menu(cid);
  menu_file.addMenuItem(menu_create);
  menu_file.show(evt); 
},

show_normal_menu : function(cid, evt) {
  var d = this;
  // init menu
  var menu_file = new Q.Menu({});
  var menu_create = d.create_contenttype_menu(cid); 
  var menu_edit = new Q.MenuItem({
    text: "属性", 
    callback : function(menuitem) {
      var dlg = new category_editor({app: d.app, title: "栏目属性", contenttype: 1, cid: cid, edit: true});
      dlg.domodal();
    }
  });
  menu_file.addMenuItem(menu_create);
  menu_file.addMenuItem(menu_edit);
  menu_file.show(evt); 

},

create_contenttype_menu : function(cid) {
  var d = this;
  var m4 = new Q.MenuItem({text: "创建"});
  var m40 = new Q.MenuItem({
    text: "新文档",
    callback : function(menuitem) {
      var dlg = new document_create_title({app: d.app, title: "新文档", cid: cid});
      dlg.domodal();
    }
  });
  var m41 = new Q.MenuItem({
    text: "文章栏目",
    callback : function(menuitem) {
      var dlg = new category_editor({app: d.app, title: "创建文章栏目", pid: cid, contenttype: 1, edit: false});
      dlg.domodal();
    }
  });

  var m42 = new Q.MenuItem({
    text: "网址栏目", 
    callback : function(menuitem) {
      var dlg = new category_editor({app: d.app, title: "创建网址栏目", pid: cid, contenttype: 5, edit: false});
      dlg.domodal();
    }
  });
    
  m4.addSubMenuItem(m40);
  m4.addSubMenuItem(m41);
  m4.addSubMenuItem(m42);
  m4.hidePopup(); 
  return m4;
},

});
 
</script>